plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.2'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.nhn.corp.ext'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2023.0.3")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	//implementation 'org.springframework.cloud:spring-cloud-function-context'
	implementation 'org.springframework.cloud:spring-cloud-stream-binder-rabbit'
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation("org.springframework.cloud:spring-cloud-stream")
	testImplementation("org.springframework.cloud:spring-cloud-stream-test-binder")
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}


tasks.named('bootBuildImage') {
	if (System.getProperty("os.arch").toLowerCase().startsWith('aarch')) {
		builder = "ghcr.io/thomasvitale/builder-arm:tiny"
	}
	builder = "paketobuildpacks/builder:tiny"
}

bootBuildImage {
	imageName = "${project.name}"
	environment = ["BP_JVM_VERSION": "17.*"]

	docker {
		publishRegistry {
			username = project.findProperty("registryUsername")
			password = project.findProperty("registryToken")
			url = project.findProperty("registryUrl")
		}
	}
}

