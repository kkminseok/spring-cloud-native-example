server:
  port: 9000
  netty:
    connection-timeout: 2s
    idle-timeout: 15s
  shutdown: graceful

spring:
  application:
    name: edge-service
  lifecycle:
    timeout-per-shutdown-phase: 15s
  config:
    import: "optional:configserver:"
  session:
    store-type: redis
    timeout: 10m
    redis:
      namespace: polar:edge
  cloud:
    gateway:
      httpclient:
        connect-timeout: 2000
        response-timeout: 5s
        pool:
          type: elastic
          max-idle-time: 15s
          max-life-time: 60s
      routes:
        - id: catalog-route
          uri: ${CATALOG_SERVICE_URL:http://localhost:9001}/books
          predicates:
            - Path=/books/**
          filters:
            - name: CircuitBreaker
              args:
                name: catalogCircuitBreaker
                fallbackUri: forward:/catalog-fallback
        - id: order-route
          uri: ${ORDER_SERVICE_URL:http://localhost:9002}/orders
          predicates:
            - Path=/orders/**
          filters:
            - name: CircuitBreaker
              args:
                name: orderCircuitBreaker
        - id: spa-route
          uri: ${SPA_URL:http://localhost:9004}
          predicates:
            - Path=/,/*.css,/*.js,/favicon.ico
      default-filters:
        - SaveSession
        - TokenRelay
        - name: Retry
          args:
            retries: 3
            methods: GET
            series: SERVER_ERROR
            exceptions: java.io.IOException,
              java.util.concurrent.TimeoutException
            backoff:
              firstBackoff: 50ms
              maxBackoff: 500ms
              factor: 2
              basedOnPreviousValue: false
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10 # 초당 버킷에 떨어지는 토큰의 수
              burstCapacity: 20 # 최대 20개 요청까지 허용
              requestedTokens: 1 # 하나의 요청 처리에 몇 개의 토큰이 사용되는지 지정
    config:
      uri: http://localhost:8888
      request-connect-timeout: 5000
      request-read-timeout: 5000
      fail-fast: false
      retry:
        max-attempts: 6
        initial-interval: 1000
        max-interval: 1000
        multiplier: 1.1
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8080/realms/PolarBookshop
      client:
        registration:
          keycloak:
            client-id: edge-service
            client-secret: polar-keycloak-secret
            scope: openid,roles
        provider:
          keycloak:
            issuer-uri: http://localhost:8080/realms/PolarBookshop

  data:
    redis:
      connect-timeout: 2s
      host: localhost
      port: 6379
      timeout: 1s
resilience4j:
  circuitbreaker:
    configs:
      default: # 모든 서킷 브레이커에 대한 기본 설정
        slidingWindowSize: 20 # 폐쇄 상태일 때 호출의 결과를 기록하는데 사용하는 슬라이딩 윈도우 크기
        permittedNumberOfCallsInHalfOpenState: 5 # 반개방 상태일 때 허용되는 호출 수
        failureRateThreshold: 50 # 실패율이 임계값 이상이면 회로는 개방상태로 변경
        waitDurationInOpenState: 15000 # 개방 상태에서 반개방 상태로 가기까지 기다릴 시간(밀리초)
  timelimiter:
    configs:
      default: # 모든 시간 제한에 대한 기본 설정
        timeoutDuration: 5s # 타임아웃 설정 (초)

logging:
  level:
    io.github.resilience4j: DEBUG